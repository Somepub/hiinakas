// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.0
//   protoc               v5.29.2
// source: ws.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "ws";

export enum EventType {
  CONNECT = 0,
  LOBBY_QUEUE = 1,
  LOBBY_STATISTICS = 2,
  GAME_TURN = 3,
  DISCONNECT = 4,
  PING = 5,
  PONG = 6,
  UNKNOWN = 7,
  UNRECOGNIZED = -1,
}

export function eventTypeFromJSON(object: any): EventType {
  switch (object) {
    case 0:
    case "CONNECT":
      return EventType.CONNECT;
    case 1:
    case "LOBBY_QUEUE":
      return EventType.LOBBY_QUEUE;
    case 2:
    case "LOBBY_STATISTICS":
      return EventType.LOBBY_STATISTICS;
    case 3:
    case "GAME_TURN":
      return EventType.GAME_TURN;
    case 4:
    case "DISCONNECT":
      return EventType.DISCONNECT;
    case 5:
    case "PING":
      return EventType.PING;
    case 6:
    case "PONG":
      return EventType.PONG;
    case 7:
    case "UNKNOWN":
      return EventType.UNKNOWN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EventType.UNRECOGNIZED;
  }
}

export function eventTypeToJSON(object: EventType): string {
  switch (object) {
    case EventType.CONNECT:
      return "CONNECT";
    case EventType.LOBBY_QUEUE:
      return "LOBBY_QUEUE";
    case EventType.LOBBY_STATISTICS:
      return "LOBBY_STATISTICS";
    case EventType.GAME_TURN:
      return "GAME_TURN";
    case EventType.DISCONNECT:
      return "DISCONNECT";
    case EventType.PING:
      return "PING";
    case EventType.PONG:
      return "PONG";
    case EventType.UNKNOWN:
      return "UNKNOWN";
    case EventType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface WsEvent {
  event: EventType;
  data: Uint8Array;
}

function createBaseWsEvent(): WsEvent {
  return { event: 0, data: new Uint8Array(0) };
}

export const WsEvent: MessageFns<WsEvent> = {
  encode(message: WsEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.event !== 0) {
      writer.uint32(8).int32(message.event);
    }
    if (message.data.length !== 0) {
      writer.uint32(18).bytes(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WsEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWsEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.event = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WsEvent {
    return {
      event: isSet(object.event) ? eventTypeFromJSON(object.event) : 0,
      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
    };
  },

  toJSON(message: WsEvent): unknown {
    const obj: any = {};
    if (message.event !== 0) {
      obj.event = eventTypeToJSON(message.event);
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WsEvent>, I>>(base?: I): WsEvent {
    return WsEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WsEvent>, I>>(object: I): WsEvent {
    const message = createBaseWsEvent();
    message.event = object.event ?? 0;
    message.data = object.data ?? new Uint8Array(0);
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
