// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.0
//   protoc               v4.22.0
// source: lobby.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "lobby";

export enum LobbyQueueAction {
  START = 0,
  WAIT = 1,
  UNRECOGNIZED = -1,
}

export function lobbyQueueActionFromJSON(object: any): LobbyQueueAction {
  switch (object) {
    case 0:
    case "START":
      return LobbyQueueAction.START;
    case 1:
    case "WAIT":
      return LobbyQueueAction.WAIT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LobbyQueueAction.UNRECOGNIZED;
  }
}

export function lobbyQueueActionToJSON(object: LobbyQueueAction): string {
  switch (object) {
    case LobbyQueueAction.START:
      return "START";
    case LobbyQueueAction.WAIT:
      return "WAIT";
    case LobbyQueueAction.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface LobbyPlayer {
  playerUid: string;
  name: string;
  publicUid: string;
}

export interface PlayerStats {
  uid: string;
  name: string;
  wins: number;
  losses: number;
}

export interface MatchHistory {
  gameUid: string;
  winnerUid: string;
  winnerName: string;
  duration: number;
  gameType: number;
  otherPlayers: string[];
}

export interface LobbyStatistics {
  playerCount: number;
  gameCount: number;
  playerStats: PlayerStats[];
  matchHistory: MatchHistory[];
}

export interface LobbyQueueRequest {
  player: LobbyPlayer | undefined;
  leave: boolean;
  maxPlayers: number;
}

export interface LobbyQueueResponse {
  gameUid: string;
  action: LobbyQueueAction;
}

export interface PublicLobbyPlayer {
  publicUid: string;
  name: string;
}

function createBaseLobbyPlayer(): LobbyPlayer {
  return { playerUid: "", name: "", publicUid: "" };
}

export const LobbyPlayer: MessageFns<LobbyPlayer> = {
  encode(message: LobbyPlayer, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerUid !== "") {
      writer.uint32(10).string(message.playerUid);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.publicUid !== "") {
      writer.uint32(26).string(message.publicUid);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LobbyPlayer {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLobbyPlayer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.playerUid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.publicUid = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LobbyPlayer {
    return {
      playerUid: isSet(object.playerUid) ? globalThis.String(object.playerUid) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      publicUid: isSet(object.publicUid) ? globalThis.String(object.publicUid) : "",
    };
  },

  toJSON(message: LobbyPlayer): unknown {
    const obj: any = {};
    if (message.playerUid !== "") {
      obj.playerUid = message.playerUid;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.publicUid !== "") {
      obj.publicUid = message.publicUid;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LobbyPlayer>, I>>(base?: I): LobbyPlayer {
    return LobbyPlayer.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LobbyPlayer>, I>>(object: I): LobbyPlayer {
    const message = createBaseLobbyPlayer();
    message.playerUid = object.playerUid ?? "";
    message.name = object.name ?? "";
    message.publicUid = object.publicUid ?? "";
    return message;
  },
};

function createBasePlayerStats(): PlayerStats {
  return { uid: "", name: "", wins: 0, losses: 0 };
}

export const PlayerStats: MessageFns<PlayerStats> = {
  encode(message: PlayerStats, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uid !== "") {
      writer.uint32(10).string(message.uid);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.wins !== 0) {
      writer.uint32(24).uint32(message.wins);
    }
    if (message.losses !== 0) {
      writer.uint32(32).uint32(message.losses);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayerStats {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerStats();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.uid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.wins = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.losses = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerStats {
    return {
      uid: isSet(object.uid) ? globalThis.String(object.uid) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      wins: isSet(object.wins) ? globalThis.Number(object.wins) : 0,
      losses: isSet(object.losses) ? globalThis.Number(object.losses) : 0,
    };
  },

  toJSON(message: PlayerStats): unknown {
    const obj: any = {};
    if (message.uid !== "") {
      obj.uid = message.uid;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.wins !== 0) {
      obj.wins = Math.round(message.wins);
    }
    if (message.losses !== 0) {
      obj.losses = Math.round(message.losses);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerStats>, I>>(base?: I): PlayerStats {
    return PlayerStats.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayerStats>, I>>(object: I): PlayerStats {
    const message = createBasePlayerStats();
    message.uid = object.uid ?? "";
    message.name = object.name ?? "";
    message.wins = object.wins ?? 0;
    message.losses = object.losses ?? 0;
    return message;
  },
};

function createBaseMatchHistory(): MatchHistory {
  return { gameUid: "", winnerUid: "", winnerName: "", duration: 0, gameType: 0, otherPlayers: [] };
}

export const MatchHistory: MessageFns<MatchHistory> = {
  encode(message: MatchHistory, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gameUid !== "") {
      writer.uint32(10).string(message.gameUid);
    }
    if (message.winnerUid !== "") {
      writer.uint32(18).string(message.winnerUid);
    }
    if (message.winnerName !== "") {
      writer.uint32(26).string(message.winnerName);
    }
    if (message.duration !== 0) {
      writer.uint32(32).uint32(message.duration);
    }
    if (message.gameType !== 0) {
      writer.uint32(40).uint32(message.gameType);
    }
    for (const v of message.otherPlayers) {
      writer.uint32(50).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MatchHistory {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMatchHistory();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.gameUid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.winnerUid = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.winnerName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.duration = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.gameType = reader.uint32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.otherPlayers.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MatchHistory {
    return {
      gameUid: isSet(object.gameUid) ? globalThis.String(object.gameUid) : "",
      winnerUid: isSet(object.winnerUid) ? globalThis.String(object.winnerUid) : "",
      winnerName: isSet(object.winnerName) ? globalThis.String(object.winnerName) : "",
      duration: isSet(object.duration) ? globalThis.Number(object.duration) : 0,
      gameType: isSet(object.gameType) ? globalThis.Number(object.gameType) : 0,
      otherPlayers: globalThis.Array.isArray(object?.otherPlayers)
        ? object.otherPlayers.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: MatchHistory): unknown {
    const obj: any = {};
    if (message.gameUid !== "") {
      obj.gameUid = message.gameUid;
    }
    if (message.winnerUid !== "") {
      obj.winnerUid = message.winnerUid;
    }
    if (message.winnerName !== "") {
      obj.winnerName = message.winnerName;
    }
    if (message.duration !== 0) {
      obj.duration = Math.round(message.duration);
    }
    if (message.gameType !== 0) {
      obj.gameType = Math.round(message.gameType);
    }
    if (message.otherPlayers?.length) {
      obj.otherPlayers = message.otherPlayers;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MatchHistory>, I>>(base?: I): MatchHistory {
    return MatchHistory.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MatchHistory>, I>>(object: I): MatchHistory {
    const message = createBaseMatchHistory();
    message.gameUid = object.gameUid ?? "";
    message.winnerUid = object.winnerUid ?? "";
    message.winnerName = object.winnerName ?? "";
    message.duration = object.duration ?? 0;
    message.gameType = object.gameType ?? 0;
    message.otherPlayers = object.otherPlayers?.map((e) => e) || [];
    return message;
  },
};

function createBaseLobbyStatistics(): LobbyStatistics {
  return { playerCount: 0, gameCount: 0, playerStats: [], matchHistory: [] };
}

export const LobbyStatistics: MessageFns<LobbyStatistics> = {
  encode(message: LobbyStatistics, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerCount !== 0) {
      writer.uint32(8).uint32(message.playerCount);
    }
    if (message.gameCount !== 0) {
      writer.uint32(16).uint32(message.gameCount);
    }
    for (const v of message.playerStats) {
      PlayerStats.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.matchHistory) {
      MatchHistory.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LobbyStatistics {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLobbyStatistics();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.playerCount = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.gameCount = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.playerStats.push(PlayerStats.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.matchHistory.push(MatchHistory.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LobbyStatistics {
    return {
      playerCount: isSet(object.playerCount) ? globalThis.Number(object.playerCount) : 0,
      gameCount: isSet(object.gameCount) ? globalThis.Number(object.gameCount) : 0,
      playerStats: globalThis.Array.isArray(object?.playerStats)
        ? object.playerStats.map((e: any) => PlayerStats.fromJSON(e))
        : [],
      matchHistory: globalThis.Array.isArray(object?.matchHistory)
        ? object.matchHistory.map((e: any) => MatchHistory.fromJSON(e))
        : [],
    };
  },

  toJSON(message: LobbyStatistics): unknown {
    const obj: any = {};
    if (message.playerCount !== 0) {
      obj.playerCount = Math.round(message.playerCount);
    }
    if (message.gameCount !== 0) {
      obj.gameCount = Math.round(message.gameCount);
    }
    if (message.playerStats?.length) {
      obj.playerStats = message.playerStats.map((e) => PlayerStats.toJSON(e));
    }
    if (message.matchHistory?.length) {
      obj.matchHistory = message.matchHistory.map((e) => MatchHistory.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LobbyStatistics>, I>>(base?: I): LobbyStatistics {
    return LobbyStatistics.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LobbyStatistics>, I>>(object: I): LobbyStatistics {
    const message = createBaseLobbyStatistics();
    message.playerCount = object.playerCount ?? 0;
    message.gameCount = object.gameCount ?? 0;
    message.playerStats = object.playerStats?.map((e) => PlayerStats.fromPartial(e)) || [];
    message.matchHistory = object.matchHistory?.map((e) => MatchHistory.fromPartial(e)) || [];
    return message;
  },
};

function createBaseLobbyQueueRequest(): LobbyQueueRequest {
  return { player: undefined, leave: false, maxPlayers: 0 };
}

export const LobbyQueueRequest: MessageFns<LobbyQueueRequest> = {
  encode(message: LobbyQueueRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.player !== undefined) {
      LobbyPlayer.encode(message.player, writer.uint32(10).fork()).join();
    }
    if (message.leave !== false) {
      writer.uint32(16).bool(message.leave);
    }
    if (message.maxPlayers !== 0) {
      writer.uint32(24).uint32(message.maxPlayers);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LobbyQueueRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLobbyQueueRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.player = LobbyPlayer.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.leave = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.maxPlayers = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LobbyQueueRequest {
    return {
      player: isSet(object.player) ? LobbyPlayer.fromJSON(object.player) : undefined,
      leave: isSet(object.leave) ? globalThis.Boolean(object.leave) : false,
      maxPlayers: isSet(object.maxPlayers) ? globalThis.Number(object.maxPlayers) : 0,
    };
  },

  toJSON(message: LobbyQueueRequest): unknown {
    const obj: any = {};
    if (message.player !== undefined) {
      obj.player = LobbyPlayer.toJSON(message.player);
    }
    if (message.leave !== false) {
      obj.leave = message.leave;
    }
    if (message.maxPlayers !== 0) {
      obj.maxPlayers = Math.round(message.maxPlayers);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LobbyQueueRequest>, I>>(base?: I): LobbyQueueRequest {
    return LobbyQueueRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LobbyQueueRequest>, I>>(object: I): LobbyQueueRequest {
    const message = createBaseLobbyQueueRequest();
    message.player = (object.player !== undefined && object.player !== null)
      ? LobbyPlayer.fromPartial(object.player)
      : undefined;
    message.leave = object.leave ?? false;
    message.maxPlayers = object.maxPlayers ?? 0;
    return message;
  },
};

function createBaseLobbyQueueResponse(): LobbyQueueResponse {
  return { gameUid: "", action: 0 };
}

export const LobbyQueueResponse: MessageFns<LobbyQueueResponse> = {
  encode(message: LobbyQueueResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gameUid !== "") {
      writer.uint32(10).string(message.gameUid);
    }
    if (message.action !== 0) {
      writer.uint32(16).int32(message.action);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LobbyQueueResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLobbyQueueResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.gameUid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.action = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LobbyQueueResponse {
    return {
      gameUid: isSet(object.gameUid) ? globalThis.String(object.gameUid) : "",
      action: isSet(object.action) ? lobbyQueueActionFromJSON(object.action) : 0,
    };
  },

  toJSON(message: LobbyQueueResponse): unknown {
    const obj: any = {};
    if (message.gameUid !== "") {
      obj.gameUid = message.gameUid;
    }
    if (message.action !== 0) {
      obj.action = lobbyQueueActionToJSON(message.action);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LobbyQueueResponse>, I>>(base?: I): LobbyQueueResponse {
    return LobbyQueueResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LobbyQueueResponse>, I>>(object: I): LobbyQueueResponse {
    const message = createBaseLobbyQueueResponse();
    message.gameUid = object.gameUid ?? "";
    message.action = object.action ?? 0;
    return message;
  },
};

function createBasePublicLobbyPlayer(): PublicLobbyPlayer {
  return { publicUid: "", name: "" };
}

export const PublicLobbyPlayer: MessageFns<PublicLobbyPlayer> = {
  encode(message: PublicLobbyPlayer, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.publicUid !== "") {
      writer.uint32(10).string(message.publicUid);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PublicLobbyPlayer {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePublicLobbyPlayer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.publicUid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PublicLobbyPlayer {
    return {
      publicUid: isSet(object.publicUid) ? globalThis.String(object.publicUid) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: PublicLobbyPlayer): unknown {
    const obj: any = {};
    if (message.publicUid !== "") {
      obj.publicUid = message.publicUid;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PublicLobbyPlayer>, I>>(base?: I): PublicLobbyPlayer {
    return PublicLobbyPlayer.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PublicLobbyPlayer>, I>>(object: I): PublicLobbyPlayer {
    const message = createBasePublicLobbyPlayer();
    message.publicUid = object.publicUid ?? "";
    message.name = object.name ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
